@model SmartCitizen.Models.Complaint

@{
    ViewData["Title"] = "Complaint Details";
}
<nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <a class="navbar-brand" href="#">SmartCitizen</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
            <li class="nav-item">
                <a class="nav-link" href="@Url.Action("Index", "Home")">Home</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="@Url.Action("Contact", "Home")">Contact Us</a>
            </li>
        </ul>
    </div>
</nav>

<div class="container mt-5">
    <h2 class="text-center text-primary mb-4">@ViewData["Title"]</h2>
    <div class="card shadow-lg border-0">
        <div class="card-body">
            <h5 class="card-title text-dark font-weight-bold">@Model.Title</h5>

            <p class="card-text">
                <strong>Description:</strong> @Model.Description
            </p>
            <p class="card-text">
                <strong>Status:</strong>
                <span class="badge >@Model.Status</span>
            </p>
            <p class="card-text">
                <strong>Date Submitted:</strong> @Model.CreatedAt.ToString("MMMM dd, yyyy")
            </p>

            @if (!string.IsNullOrEmpty(Model.ImagePath))
            {
                <div class="mb-3">
                    <img src="@Model.ImagePath" class="img-fluid rounded shadow" alt="Complaint Image" />
                </div>
            }


        </div>
    </div>
</div>
<!-- 🚀 Display Comments Section -->
@foreach (var comment in Model.Comments.OrderByDescending(c => c.CreatedAt))
{
    <li class="list-group-item d-flex justify-content-between align-items-center">
        <div>
            <strong>@(comment.User?.UserName ?? "Anonymous")</strong>
            <p class="mb-1">@comment.Content</p>
            <small class="text-muted">@comment.CreatedAt.ToString("MMMM dd, yyyy HH:mm")</small>
        </div>

        @if (User.Identity.IsAuthenticated && (User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value == comment.UserId))
        {
            <form asp-action="DeleteComment" asp-controller="Home" method="post" onsubmit="return confirm('Are you sure you want to delete this comment?');">
                <input type="hidden" name="commentId" value="@comment.Id" />
                <input type="hidden" name="complaintId" value="@Model.Id" />
                <button type="submit" class="btn btn-sm btn-danger">Delete</button>
            </form>
        }
    </li>
}



@if (User.Identity.IsAuthenticated)
{
    <form asp-action="AddComment" asp-controller="Home" method="post">
        <input type="hidden" name="complaintId" value="@Model.Id" />
        <input type="hidden" name="UserId" value="@Model.UserId" />
        <textarea name="content" rows="3" class="form-control" placeholder="Write a comment..."></textarea>
        <button type="submit" class="btn btn-primary mt-2">Post Comment</button>
    </form>
}
else
{
    <p><a asp-area="Identity" asp-page="/Account/Login">Log in</a> to post a comment.</p>
}

@section Scripts {
    <script>
        function GetStatusClass(status) {
            switch (status.toLowerCase()) {
                case 'resolved':
                    return 'bg-success text-white';
                case 'in-progress':
                    return 'bg-warning text-dark';
                case 'pending':
                    return 'bg-danger text-white';
                default:
                    return 'bg-secondary text-white';
            }
        }
    </script>
}
